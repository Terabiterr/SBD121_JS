// Переменные
//Отличие var от const и let
// function varTest() {
//   var x = 1;
//   if (true) {
//     var x = 2;  // та же переменная!
//     console.log(`var:${x}`);  // 2
//   }
//   console.log(`var:${x}`);  // 2
// }
// varTest()
// function letTest() {
//   let x = 1;
//   if (true) {
//     let x = 2;  // другая переменная
//     console.log(`let:${x}`);  // 2
//   }
//   console.log(`let:${x}`);  // 1
// }
// letTest()
// function constTest() {
//     const x = 1;
//     x = 2; // ошибка
//     if (true) {
//         const x = 2;  // другая переменная , нет ошибки
//         console.log(`const:${x}`);  // 2
//     }
//     console.log(`const:${x}`);  // 1
// }
// constTest()
//------------------------------------------------------------------------
// Числовые данные
// Number
// Тип Number представляет числа в JavaScript, которые могут быть целыми или дробными:
// Целые числа, например, 35. Мы можем использовать как положительные, так и отрицательные числа. Диапазон используемых чисел: от -253 до 253
// Дробные числа (числа с плавающей точкой), например, 3.5575. Опять же можно использовать как положительные, так и отрицательные числа. Для чисел с плавающей точкой используется тот же диапазон: от -253 до 253
// Например:
let x = 45;
let y = 23.897;
// В качестве разделителя между целой и дробной частями, как и в других языках программирования, используется точка.
//------------------------------------------------------------------------
// Тип BigInt
// Тип BigInt добавлен в последних стандартах JavaScript для представления очень больших целых чисел, которые выходят за пределы диапазона типа number. Это не значит, что мы не можем совсем работать с большими числами с помощью типа number, но работа с ними в случае с типом number будет сопряжена с проблемами. Рассмотрим небольшой 
// пример:
let num1 = 9007199254740991
console.log(num1);       // 9007199254740991
console.log(num1 + 1);   // 9007199254740992
console.log(num1 + 2);   // 9007199254740992
// Здесь переменной num присваивается максимальное значение. И далее прибавляем к ней некоторые значения и выводим на консоль результат. И результаты могут нас смутить, особенно в случае прибавления числа 2.
// Для определения числа как значения типа BigInt в конце числа добавляется суффикс n:
let dimension = 19007n;
const value = 2545n;
// Например, изменим из предыдущего примера тип number на bigint:
let num2 = 9007199254740991n
console.log(num2);       // 9007199254740991n
console.log(num2 + 1n);  // 9007199254740992n
console.log(num2 + 2n);  // 9007199254740993n
console.log(num2 + 3n);  // 9007199254740994n
//------------------------------------------------------------------------
// Тип Boolean
// Тип Boolean представляет булевые или логические значения true (верно) и false (ложно):
let isAlive1 = true;
let isDead = false;
//------------------------------------------------------------------------
// Строки String
// Тип String представляет строки. Для определения строк применяются кавычки, причем, можно использовать как двойные, так одинарные, так и косые кавычки. Единственно ограничение: тип закрывающей кавычки должен быть тот же, что и тип открывающей, то есть либо обе двойные, либо обе одинарные.
let user1 = "Tom";
let company1 = 'Microsoft';
let language = `JavaScript`;
console.log(user1);
console.log(company1);
console.log(language);
// Если внутри строки встречаются кавычки, то мы их должны экранировать слешем. Например, пусть у нас есть текст "Бюро "Рога и копыта"". Теперь экранируем кавычки:
let company = "Бюро \"Рога и копыта\"";
// Также мы можем внутри стоки использовать другой тип кавычек:
let company12 = "Бюро 'Рога и копыта'";
let company2 = 'Бюро "Рога и копыта"';
//------------------------------------------------------------------------
// Интерполяция
// Использование косых кавычек позволяет нам применять такой прием как интерполяция - встраивать данные в строку. 
// Например:
let user3 = "Tom";
let text4 = `Name: ${user3}`;
console.log(text);  // Name: Tom
// Для встраивания значений выражений (например, значений других переменных и констант) в строку перед выражением ставится знак доллара $, после которого в фигурных скобках указывается выражение. Так, в примере выше ${user} означает, что в этом месте строки надо встроить значение переменной user.
// Подобным образом можно встраивать и больше количество данных:
let user5 = "Tom";
let age = 37;
let isMarried = false;
let text = `Name: ${user5}   Age: ${age}   IsMarried: ${isMarried}`;
console.log(text);  // Name: Tom   Age: 37   IsMarried: false
//------------------------------------------------------------------------
// null и undefined
// undefined указывает, что значение не определено или не установлено. Например, когда мы только определяем переменную без присвоения ей начального значения, она представляет тип undefined:
let isAlive5;
console.log(isAlive5); // выведет undefined
// Присвоение значение null означает, что у переменной отсутствует значение:
let isAlive;
console.log(isAlive); // undefined
isAlive = null;
console.log(isAlive); // null
isAlive = undefined;  // снова установим тип undefined
console.log(isAlive); // undefined
//------------------------------------------------------------------------
// object
// Тип object представляет сложный объект. Простейшее определение объекта представляют фигурные скобки:
let user11 = {};
// Объект может иметь различные свойства и методы:
const user12 = {name: "Tom", age:24};
console.log(user.name);
// В данном случае объект называется user, и он имеет два свойства: name и age. Это краткое описание объектов, более подробно объекты мы рассморим в последующих статьях.
//------------------------------------------------------------------------
// Слабая типизация
// JavaScript является языком со слабой типизацией. Это значит, что переменные могут динамически менять тип. 
// Например:
let id;  // тип undefined
console.log(id);
id = 45;  // тип number
console.log(id);
id = "45"; // тип string
console.log(id);
// Несмотря на то, что во втором и третьем случае консоль выведет нам число 45, но во втором случае переменная id будет представлять число, а в третьем случае - строку.
// Это важный момент, который надо учитывать и от которого зависит поведение переменной в программе:
let a = 45;  // тип number
let b = a + 5;
console.log(b); // 50
a = "45"; // тип string
let c = a + 5
console.log(c); // 455
// Выше в обоих случая к переменной a применяется операция сложения (+). Но в первом случае a представляет число, поэтому результатом операции a + 5 будет число 50.
// Во втором случае a представляет строку. Но операция сложения между строкой и числом 5 невозможна. Поэтому число 5 будет преобразовываться к строке, и будет происходить операция объединения строк. Поэтому во втором случае результатом выражения a + 5 будет стока "455".
//------------------------------------------------------------------------
// Оператор typeof
// С помощью оператора typeof можно получить тип переменной:
let id2;
console.log(typeof id2);       // undefined
id = 45;
console.log(typeof id2);   // number
id = 45n;
console.log(typeof id2);     // bigint
id = "45";
console.log(typeof id2);     // string
// Стоит отметить, что для значения null оператор typeof возвращает значение "object", несмотря на то, что согласно спецификации JavaScript значение null представляет отдельный тип.
//Object
var user2 = {
    id: "1",
    name: "Alex",
    skills: [
        "socer",
        "developer js",
        { age: 18, sex: 1, money: 125.50 },
        50
    ]
}
console.log(user2)